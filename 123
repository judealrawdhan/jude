import argparse
import sys
import time
import numpy as np
import RPi.GPIO as GPIO
from picamera2 import Picamera2, MappedArray, CompletedRequest
from picamera2.devices import IMX500
from picamera2.devices.imx500 import NetworkIntrinsics
from picamera2.devices.imx500.postprocess import softmax
import cv2

# GPIO Pin Configuration
RED_LIGHT_A = 17
YELLOW_LIGHT_A = 27
GREEN_LIGHT_A = 22
RED_LIGHT_B = 5
YELLOW_LIGHT_B = 6
GREEN_LIGHT_B = 13

GPIO.setmode(GPIO.BCM)
GPIO.setup([RED_LIGHT_A, YELLOW_LIGHT_A, GREEN_LIGHT_A, RED_LIGHT_B, YELLOW_LIGHT_B, GREEN_LIGHT_B], GPIO.OUT)

# Global State
LABELS = None
ambulance_detected = False
last_detection_time = 0
EMERGENCY_ACTIVE = False

# Traffic Light Control
def set_light(pin_group, color):
    for pin in pin_group.values():
        GPIO.output(pin, GPIO.LOW)
    if color in pin_group:
        GPIO.output(pin_group[color], GPIO.HIGH)

light_a = {"red": RED_LIGHT_A, "yellow": YELLOW_LIGHT_A, "green": GREEN_LIGHT_A}
light_b = {"red": RED_LIGHT_B, "yellow": YELLOW_LIGHT_B, "green": GREEN_LIGHT_B}

# Classification Callback
def parse_classification_results(request: CompletedRequest):
    global ambulance_detected, last_detection_time

    np_outputs = imx500.get_outputs(request.get_metadata())
    if np_outputs is None:
        return

    np_output = softmax(np_outputs[0]) if intrinsics.softmax else np_outputs[0]
    top_idx = np.argmax(np_output)
    label = get_label(request, top_idx)

    if "ambulance" in label.lower():
        ambulance_detected = True
        last_detection_time = time.time()

    draw_classification_results(request, [(label, np_output[top_idx])])

def get_label(request: CompletedRequest, idx: int) -> str:
    global LABELS
    if LABELS is None:
        LABELS = intrinsics.labels
        if len(LABELS) == 1001:
            LABELS = LABELS[1:]
    return LABELS[idx]

def draw_classification_results(request: CompletedRequest, results, stream="main"):
    with MappedArray(request, stream) as m:
        for idx, (label, score) in enumerate(results):
            text = f"{label}: {score:.2f}"
            cv2.putText(m.array, text, (5, 20 + idx * 20), cv2.FONT_HERSHEY_SIMPLEX, 0.5, (0, 0, 255), 1)

# Emergency Handling
def handle_emergency():
    print("ðŸš¨ Ambulance detected!")

    # Lock A green, B red
    set_light(light_a, "green")
    set_light(light_b, "red")

    # Wait until no ambulance is detected
    while time.time() - last_detection_time < 2:
        time.sleep(0.5)

    print("âœ… Ambulance gone. Finishing emergency sequence...")

    # Keep A green 13s
    time.sleep(13)
    set_light(light_a, "yellow")
    time.sleep(3)
    set_light(light_a, "red")

    # B green now
    set_light(light_b, "green")
    time.sleep(13)
    set_light(light_b, "yellow")
    time.sleep(3)
    set_light(light_b, "red")

# Normal Traffic Cycle
def normal_cycle():
    # A red, B green
    set_light(light_a, "red")
    set_light(light_b, "green")
    wait_with_detection(13)

    set_light(light_b, "yellow")
    wait_with_detection(3)
    set_light(light_b, "red")

    # A green
    set_light(light_a, "green")
    wait_with_detection(13)
    set_light(light_a, "yellow")
    wait_with_detection(3)
    set_light(light_a, "red")

# Smart wait with interrupt
def wait_with_detection(duration):
    global ambulance_detected
    start = time.time()
    while time.time() - start < duration:
        if ambulance_detected:
            ambulance_detected = False
            handle_emergency()
            break
        time.sleep(0.1)

# Main Loop
def main():
    picam2 = Picamera2(imx500.camera_num)
    config = picam2.create_preview_configuration(controls={"FrameRate": intrinsics.inference_rate}, buffer_count=12)
    picam2.start(config, show_preview=True)
    picam2.pre_callback = parse_classification_results

    while True:
        normal_cycle()

# CLI
def get_args():
    parser = argparse.ArgumentParser()
    parser.add_argument("--model", type=str, default="/usr/share/imx500-models/imx500_network_mobilenet_v2.rpk")
    parser.add_argument("--fps", type=int)
    parser.add_argument("-s", "--softmax", action="store_true")
    parser.add_argument("-r", "--preserve-aspect-ratio", action="store_true")
    parser.add_argument("--labels", type=str)
    return parser.parse_args()

# Startup
if __name__ == "__main__":
    args = get_args()
    imx500 = IMX500(args.model)
    intrinsics = imx500.network_intrinsics or NetworkIntrinsics()

    if intrinsics.task != "classification":
        print("Model must be classification.", file=sys.stderr)
        sys.exit(1)

    if args.labels:
        with open(args.labels) as f:
            intrinsics.labels = f.read().splitlines()

    intrinsics.update_with_defaults()

    try:
        main()
    except KeyboardInterrupt:
        print("Exiting...")
    finally:
        GPIO.cleanup()

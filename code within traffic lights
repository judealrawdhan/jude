import argparse
import sys
import time
import numpy as np
import RPi.GPIO as GPIO
from picamera2 import Picamera2, MappedArray, CompletedRequest
from picamera2.devices import IMX500
from picamera2.devices.imx500 import NetworkIntrinsics
from picamera2.devices.imx500.postprocess import softmax


# Traffic Light GPIO Setup
RED_LIGHT_A = 17
YELLOW_LIGHT_A = 27
GREEN_LIGHT_A = 22

RED_LIGHT_B = 23
YELLOW_LIGHT_B = 24
GREEN_LIGHT_B = 25

GPIO.setmode(GPIO.BCM)
GPIO.setup(RED_LIGHT_A, GPIO.OUT)
GPIO.setup(YELLOW_LIGHT_A, GPIO.OUT)
GPIO.setup(GREEN_LIGHT_A, GPIO.OUT)

GPIO.setup(RED_LIGHT_B, GPIO.OUT)
GPIO.setup(YELLOW_LIGHT_B, GPIO.OUT)
GPIO.setup(GREEN_LIGHT_B, GPIO.OUT)

# Initialize traffic lights to red
GPIO.output(RED_LIGHT_A, GPIO.HIGH)
GPIO.output(YELLOW_LIGHT_A, GPIO.LOW)
GPIO.output(GREEN_LIGHT_A, GPIO.LOW)

GPIO.output(RED_LIGHT_B, GPIO.HIGH)
GPIO.output(YELLOW_LIGHT_B, GPIO.LOW)
GPIO.output(GREEN_LIGHT_B, GPIO.LOW)

# Initialize global variable for labels
LABELS = None

# Function to control the traffic light
def set_traffic_light(light, color):
    GPIO.output(RED_LIGHT_A, GPIO.LOW)
    GPIO.output(YELLOW_LIGHT_A, GPIO.LOW)
    GPIO.output(GREEN_LIGHT_A, GPIO.LOW)

    GPIO.output(RED_LIGHT_B, GPIO.LOW)
    GPIO.output(YELLOW_LIGHT_B, GPIO.LOW)
    GPIO.output(GREEN_LIGHT_B, GPIO.LOW)

    if light == "A":
        if color == "red":
            GPIO.output(RED_LIGHT_A, GPIO.HIGH)
        elif color == "yellow":
            GPIO.output(YELLOW_LIGHT_A, GPIO.HIGH)
        elif color == "green":
            GPIO.output(GREEN_LIGHT_A, GPIO.HIGH)
    
    elif light == "B":
        if color == "red":
            GPIO.output(RED_LIGHT_B, GPIO.HIGH)
        elif color == "yellow":
            GPIO.output(YELLOW_LIGHT_B, GPIO.HIGH)
        elif color == "green":
            GPIO.output(GREEN_LIGHT_B, GPIO.HIGH)

# Function to handle classification results and switch traffic light
def parse_classification_results(request: CompletedRequest):
    # Fetch the outputs from the model (Ensure it's a numpy array)
    np_outputs = imx500.get_outputs(request.get_metadata())
    
    print(f"np_outputs: {np_outputs}")
    print(f"Type of np_outputs: {type(np_outputs)}")

    if np_outputs is None:
        return []
    
    # Ensure np_output is correctly extracted
    np_output = None
    if isinstance(np_outputs, tuple):
        # Extracting np_output from the tuple correctly
        np_output = np_outputs[0]
        print(f"Extracted np_output from tuple: {np_output}")
    else:
        np_output = np_outputs  # In case it's already a numpy array
    
    # Check if np_output is a valid numpy array
    if isinstance(np_output, np.ndarray):
        if np_output.size < 3:
            print("Error: np_output is too small")
            return []
    elif isinstance(np_output, float):
        print(f"Error: np_output is a float value: {np_output}")
        return []
    else:
        print(f"Error: np_output is not an array or float, it's of type {type(np_output)}")
        return []

    # If using softmax
    if intrinsics.softmax:
        np_output = softmax(np_output)

    # Get the top 3 classifications
    top_indices = np.argpartition(-np_output, 3)[:3]
    top_indices = top_indices[np.argsort(-np_output[top_indices])]
    
    # List of classification results
    last_detections = []
    for index in top_indices:
        label = get_label(request, index)
        score = np_output[index]
        print(f"Detected {label} with score: {score}")
        last_detections.append((label, score))

    # Check if "ambulance" was detected
    ambulance_detected = any("ambulance" in label.lower() for label, _ in last_detections)

    if ambulance_detected:
        print("ðŸš‘ Ambulance detected! Turning Traffic Light A to GREEN.")
        set_traffic_light("A", "green")
    else:
        print("ðŸš« No ambulance detected. Turning Traffic Light A to RED.")
        set_traffic_light("A", "red")
    
    return last_detections

# Function to retrieve labels
def get_label(request: CompletedRequest, idx: int) -> str:
    global LABELS
    if LABELS is None:
        # Ensure LABELS is initialized
        LABELS = intrinsics.labels
        assert len(LABELS) in [1000, 1001], "Labels file should contain 1000 or 1001 labels."
        output_tensor_size = imx500.get_output_shapes(request.get_metadata())[0][0]
        if output_tensor_size == 1000:
            LABELS = LABELS[1:]  # Ignore the background label if present
    return LABELS[idx]

# Main execution flow
def main():
    # Initialize camera and load model
    picam2 = Picamera2(imx500.camera_num)
    config = picam2.create_preview_configuration(controls={"FrameRate": intrinsics.inference_rate}, buffer_count=12)
    picam2.start(config, show_preview=True)
    
    # Set pre callback to parse classification results
    picam2.pre_callback = parse_classification_results
    
    while True:
        time.sleep(0.5)

# Get arguments from command line
def get_args():
    parser = argparse.ArgumentParser()
    parser.add_argument("--model", type=str, help="Path of the model",
                        default="/usr/share/imx500-models/imx500_network_mobilenet_v2.rpk")
    parser.add_argument("--fps", type=int, help="Frames per second")
    parser.add_argument("-s", "--softmax", action="store_true", help="Apply softmax post-processing")
    parser.add_argument("-r", "--preserve-aspect-ratio", action="store_true", help="Preserve aspect ratio")
    parser.add_argument("--labels", type=str, help="Path to the labels file")
    return parser.parse_args()

if __name__ == "__main__":
    args = get_args()

    # Load the model and setup the camera
    imx500 = IMX500(args.model)
    intrinsics = imx500.network_intrinsics
    if not intrinsics:
        intrinsics = NetworkIntrinsics()
    elif intrinsics.task != "classification":
        print("Network is not a classification task", file=sys.stderr)
        exit()

    # Override intrinsics from args
    for key, value in vars(args).items():
        if key == 'labels' and value is not None:
            with open(value, 'r') as f:
                intrinsics.labels = f.read().splitlines()

    intrinsics.update_with_defaults()

    # Start the camera and execute
    main()
